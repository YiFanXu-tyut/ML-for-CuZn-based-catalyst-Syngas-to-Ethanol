import numpy as np
import pandas as pd
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split,cross_val_score,KFold
from bayes_opt import BayesianOptimization
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv("1.8_smogn_2.csv")
X = df.iloc[:, :-1]
y = df.iloc[:, -1]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train,X_test,y_train,y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=24)

def svr_evaluate(C, gamma):
    svr_model = SVR(
        C=C,
        gamma=gamma,
        kernel='rbf')
    mse_scores = cross_val_score(svr_model, X_train, y_train, cv=5, scoring='neg_mean_squared_error')
    mean_mse = np.mean(mse_scores)
    return mean_mse
pbounds = {
    'C': (0.1, 60),
    'gamma': (0.00001, 0.1)}
optimizer = BayesianOptimization(
    f=svr_evaluate,
    pbounds=pbounds,
    random_state=42,
    verbose=2)
optimizer.maximize(init_points=20, n_iter=180)
best_params = optimizer.max['params']
print(f"Best parameters: {best_params}")

best_params = optimizer.max['params']
svr_best = SVR(**best_params)
svr_best.fit(X_train, y_train)
y_pred_train = svr_best.predict(X_train)
y_pred_test = svr_best.predict(X_test)
r2_train = r2_score(y_train, y_pred_train)
rmse_train = np.sqrt(mean_squared_error(y_train, y_pred_train))
r2_test = r2_score(y_test, y_pred_test)
rmse_test = np.sqrt(mean_squared_error(y_test, y_pred_test))
print(f"Train set R2: {r2_train}")
print(f"Train set RMSE: {rmse_train}")
print(f"Test set R2: {r2_test}")
print(f"Test set RMSE: {rmse_test}")
